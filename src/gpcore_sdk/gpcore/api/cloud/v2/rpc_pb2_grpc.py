# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

from gpcore_sdk.gpcore.api.cloud.v2 import (
    requests_pb2 as gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2,
)
from gpcore_sdk.gpcore.api.cloud.v2 import (
    responses_pb2 as gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2,
)

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in gpcore/api/cloud/v2/rpc_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class CloudServiceStub(object):
    """CloudService provide the basic needs to work with projects and their nodes.
    This is your daily driver to maintain and grow your fleet of nodes. Projects
    group a list of nodes. Every project can have it's own bill. Users can be part
    of one or more projects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListBillingProfileBills = channel.unary_unary(
            "/gpcore.api.cloud.v2.CloudService/ListBillingProfileBills",
            request_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListBillingProfileBillsRequest.SerializeToString,
            response_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListBillingProfileBillsResponse.FromString,
            _registered_method=True,
        )
        self.ListBillingProfileProjects = channel.unary_unary(
            "/gpcore.api.cloud.v2.CloudService/ListBillingProfileProjects",
            request_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListBillingProfileProjectsRequest.SerializeToString,
            response_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListBillingProfileProjectsResponse.FromString,
            _registered_method=True,
        )
        self.ListProjectLogs = channel.unary_unary(
            "/gpcore.api.cloud.v2.CloudService/ListProjectLogs",
            request_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListProjectLogsRequest.SerializeToString,
            response_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListProjectLogsResponse.FromString,
            _registered_method=True,
        )
        self.ListNodes = channel.unary_unary(
            "/gpcore.api.cloud.v2.CloudService/ListNodes",
            request_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListNodesRequest.SerializeToString,
            response_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListNodesResponse.FromString,
            _registered_method=True,
        )
        self.ReadinessCheck = channel.unary_unary(
            "/gpcore.api.cloud.v2.CloudService/ReadinessCheck",
            request_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ReadinessCheckRequest.SerializeToString,
            response_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ReadinessCheckResponse.FromString,
            _registered_method=True,
        )


class CloudServiceServicer(object):
    """CloudService provide the basic needs to work with projects and their nodes.
    This is your daily driver to maintain and grow your fleet of nodes. Projects
    group a list of nodes. Every project can have it's own bill. Users can be part
    of one or more projects.
    """

    def ListBillingProfileBills(self, request, context):
        """ListBillingProfileBills returns a list of bills associated to a given
        billing profile.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListBillingProfileProjects(self, request, context):
        """ListBillingProfileProjects returns a list of projects associated to a
        given billing profile.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListProjectLogs(self, request, context):
        """ListProjectLogs list the audit log entries for a given project. This log
        contain events happen on that project like membership changes, changes on
        settings or nodes. The executing user and the time is logged to all
        entries, so it can be used as an audit log. To narrow down the results,
        you can specify a user uuid to only show log entries for a given user. An
        optional search term can filter the result. If the result set is too large,
        only a portion will be returned. The pages_total field will indicated this.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListNodes(self, request, context):
        """ListNodes list all available nodes for a given project. If the list is too
        long, only a portion of the result will be returned. The pages_total field
        will give an indication what portion is left from the result. Use the page
        field to specify an offset. Use the search field to filter the results.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReadinessCheck(self, request, context):
        """ReadinessCheck is a simple health check to see if the service is up and
        running. It returns the version of the service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CloudServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ListBillingProfileBills": grpc.unary_unary_rpc_method_handler(
            servicer.ListBillingProfileBills,
            request_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListBillingProfileBillsRequest.FromString,
            response_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListBillingProfileBillsResponse.SerializeToString,
        ),
        "ListBillingProfileProjects": grpc.unary_unary_rpc_method_handler(
            servicer.ListBillingProfileProjects,
            request_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListBillingProfileProjectsRequest.FromString,
            response_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListBillingProfileProjectsResponse.SerializeToString,
        ),
        "ListProjectLogs": grpc.unary_unary_rpc_method_handler(
            servicer.ListProjectLogs,
            request_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListProjectLogsRequest.FromString,
            response_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListProjectLogsResponse.SerializeToString,
        ),
        "ListNodes": grpc.unary_unary_rpc_method_handler(
            servicer.ListNodes,
            request_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListNodesRequest.FromString,
            response_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListNodesResponse.SerializeToString,
        ),
        "ReadinessCheck": grpc.unary_unary_rpc_method_handler(
            servicer.ReadinessCheck,
            request_deserializer=gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ReadinessCheckRequest.FromString,
            response_serializer=gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ReadinessCheckResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "gpcore.api.cloud.v2.CloudService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "gpcore.api.cloud.v2.CloudService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class CloudService(object):
    """CloudService provide the basic needs to work with projects and their nodes.
    This is your daily driver to maintain and grow your fleet of nodes. Projects
    group a list of nodes. Every project can have it's own bill. Users can be part
    of one or more projects.
    """

    @staticmethod
    def ListBillingProfileBills(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gpcore.api.cloud.v2.CloudService/ListBillingProfileBills",
            gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListBillingProfileBillsRequest.SerializeToString,
            gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListBillingProfileBillsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListBillingProfileProjects(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gpcore.api.cloud.v2.CloudService/ListBillingProfileProjects",
            gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListBillingProfileProjectsRequest.SerializeToString,
            gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListBillingProfileProjectsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListProjectLogs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gpcore.api.cloud.v2.CloudService/ListProjectLogs",
            gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListProjectLogsRequest.SerializeToString,
            gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListProjectLogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ListNodes(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gpcore.api.cloud.v2.CloudService/ListNodes",
            gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ListNodesRequest.SerializeToString,
            gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ListNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReadinessCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gpcore.api.cloud.v2.CloudService/ReadinessCheck",
            gpcore_dot_api_dot_cloud_dot_v2_dot_requests__pb2.ReadinessCheckRequest.SerializeToString,
            gpcore_dot_api_dot_cloud_dot_v2_dot_responses__pb2.ReadinessCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
